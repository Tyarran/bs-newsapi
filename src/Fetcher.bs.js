// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Fetch = require("bs-fetch/src/Fetch.js");

require('isomorphic-fetch')
;

var baseUrl = "https://newsapi.org/v2/";

function buildQuerystring(_url, _params, paramReader) {
  while(true) {
    var params = _params;
    var url = _url;
    var url$1 = url !== undefined ? url : "";
    if (!params) {
      return url$1;
    }
    var match = Curry._1(paramReader, params.hd);
    var prefix = url$1 === "" ? "" : "&";
    var newUrl = url$1 + prefix + match[0] + "=" + match[1];
    _params = params.tl;
    _url = newUrl;
    continue ;
  };
}

function $$fetch$1(apiKey, endpoint, querystring) {
  var url;
  switch (endpoint) {
    case /* TopHeadlines */0 :
        url = "https://newsapi.org/v2/top-headlines?" + querystring;
        break;
    case /* Everything */1 :
        url = "https://newsapi.org/v2/everything?" + querystring;
        break;
    case /* Sources */2 :
        url = "https://newsapi.org/v2/sources?" + querystring;
        break;
    
  }
  return fetch(url, Fetch.RequestInit.make(undefined, {
                      Authorization: "Bearer " + apiKey
                    }, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(undefined)).then(function (prim) {
              return prim.text();
            });
}

function fetchArticles(apiKey, endpoint, querystring) {
  var promise = $$fetch$1(apiKey, endpoint, querystring);
  return promise.then(function (text) {
              return Promise.resolve(JSON.parse(text));
            });
}

function fetchSources(apiKey, endpoint, querystring) {
  var promise = $$fetch$1(apiKey, endpoint, querystring);
  return promise.then(function (text) {
              return Promise.resolve(JSON.parse(text));
            });
}

exports.baseUrl = baseUrl;
exports.buildQuerystring = buildQuerystring;
exports.$$fetch = $$fetch$1;
exports.fetchArticles = fetchArticles;
exports.fetchSources = fetchSources;
/*  Not a pure module */
